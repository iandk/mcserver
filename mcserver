#!/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin


########################################
#            VARIABLES                 #
########################################


SERVER_DIR="/opt/mc/"
BACKUP_DIR="/backup/"
KEEP_BACKUP_COUNT=7
MIN_RAM="256M"
MAX_RAM="1024M"


########################################
#            Color codes               #
########################################


RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'


########################################
#            FUNCTIONS                 #
########################################

installServer() {
    # Install required packages
    apt install -y screen zip openjdk-11-jre-headless
    # Create the required directorys
    mkdir $SERVER_DIR
    mkdir $BACKUP_DIR
    # Download the server jar
    cd $SERVER_DIR
    wget https://papermc.io/api/v2/projects/paper/versions/1.16.5/builds/564/downloads/paper-1.16.5-564.jar
    mv paper-1.16.5-564.jar mc.jar
    # Accept eula
    echo "eula=true" > eula.txt
    echo -e "${GREEN}Done!${NC}"
}



startServer() {
     # Check if the server is already running
    if [ $(getServerStatus) = true ]
    then
        echo -e "${RED}The server is already running!${NC}"
    else
        # Run start command 
        cd $SERVER_DIR && screen -dmS mc java -Xmx$MAX_RAM -Xms$MIN_RAM -jar mc.jar
        
        # Wait until the server is started
        while [ $(getServerStatus) = false ]
        do
            sleep 1
        done
        echo -e "${GREEN}Done!${NC}"
    fi
}


stopServer() {
    # Check if the server is even running
    if [ $(getServerStatus) = false ]
    then
        # Server is not running
        echo -e "${RED}The server is already stopped!${NC}"
        exit
    fi

    # Run stop command
    screen -S mc -X stuff "stop$(printf \\r)"

    # Wait until the server is stopped
    while [ $(getServerStatus) = true ]
    do
        sleep 1
    done
    echo -e "${GREEN}Done!${NC}"
}

attachServer() {
    screen -r mc
}


getServerStatus() {
    if ! screen -list | grep -q "mc" 
    then
        echo false
    else
        echo true
    fi
}

rotateBackups() {
    # Count the number of backups stored
    numberOfBackups=$(ls $BACKUP_DIR | wc -l)
    
    # Check if there are more backups than we'd like to store
    if [ "$numberOfBackups" == "$KEEP_BACKUP_COUNT" ]
    then
        echo -e "${BLUE}Deleting oldest backup...${NC}"

        # Delete the oldest backup
        cd $BACKUP_DIR
	oldestBackup=$(ls -t | tail -1)
        rm $oldestBackup
    fi
}


backupServer() {
    TIMESTAMP=`date +%Y-%m-%d_%H-%M-%S`
    ARCHIVE=$BACKUP_DIR$TIMESTAMP".zip"
    

    # Stop mc server if it's running
    if [ $(getServerStatus) = true ]
    then
        echo -e "${BLUE}Stopping server...${NC}"
        stopServer
    fi
    
    rotateBackups


    # Throw error message and exit if the server is still running to avoid a corrupted backup
    if [ $(getServerStatus) = true ]
    then
        echo -e "${RED}Server is still running, can't create backup!${NC}"
        exit
    fi

    echo -e "${BLUE}Creating backup...${NC}"
    # Create backup
    zip -r  $ARCHIVE $SERVER_DIR

    # Start mc server
    if [ $(getServerStatus) = false ]
    then
        echo -e "${BLUE}Starting server...${NC}"
        startServer
    fi

}




########################################
#            MAIN FLOW                 #
########################################


if [ -z $1 ]
then
    echo -e "${GREEN}Available commands:${NC}"
    echo "mcserver [start/stop/status/backup/attach/install]"
    exit
fi

if [ $1 = "start" ]
then
    startServer
    
elif [ $1 = "start-attached" ]
then
    startServer && attachServer

elif [ $1 = "stop" ]
then
    stopServer

elif [ $1 = "backup" ]
then
    # Run backup function
    backupServer


elif [ $1 = "attach" ]
then
    # Attach to the screen session
    attachServer

elif [ $1 = "status" ]
then
    # Call method to get the server status
    if [ $(getServerStatus) = true ]
    then
        echo -e "${GREEN}Running!${NC}"
    else
        echo -e "${RED}Stopped!${NC}"
    fi
elif [ $1 = "install" ]
then
    installServer
fi
